CREATE OR REPLACE PROCEDURE fetch_filtered_data(datasource_name VARCHAR)
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS
$$
    // Initialize the SQL query
    var sqlQuery = "SELECT * FROM " + DATASOURCE_NAME;
    var hasFilters = false;

    // Fetch filters from the filters table
    var filters = snowflake.createStatement({
        sqlText: "SELECT filter_column, filter_value FROM datasource_filters WHERE datasource_name = ?",
        binds: [DATASOURCE_NAME]
    }).execute();

    // Build WHERE clause based on available filters
    var whereClause = [];
    while (filters.next()) {
        var filterCol = filters.getColumnValue(1);
        var filterVal = filters.getColumnValue(2);
        if (filterVal) {
            whereClause.push(filterCol + " = '" + filterVal + "'");
        } else {
            whereClause.push(filterCol + " IS NOT NULL");
        }
    }

    // Append WHERE clause if filters are present
    if (whereClause.length > 0) {
        sqlQuery += " WHERE " + whereClause.join(' AND ');
    }

    // Return the constructed SQL query
    return sqlQuery;
$$;

-- Call the procedure with the name of the data source
CALL fetch_filtered_data('psgl');



-- Create the psgl table
CREATE OR REPLACE TABLE psgl (
    Id INT,
    psglNumber VARCHAR(50),
    account VARCHAR(50),
    book VARCHAR(50),
    amt FLOAT
);

-- Populate the psgl table with some example data
INSERT INTO psgl (Id, psglNumber, account, book, amt) VALUES
(1, 'PSGL001', 'A100', 'Book1', 5000.00),
(2, 'PSGL002', 'A101', 'Book2', 1500.00),
(3, 'PSGL003', 'A102', 'Book1', 2500.00),
(4, 'PSGL004', 'A103', 'Book3', 3500.00);



-- Create the filters table
CREATE OR REPLACE TABLE datasource_filters (
    datasource_name VARCHAR(100),
    filter_column VARCHAR(100),
    filter_value VARCHAR(100) -- This can be NULL indicating no pre-set filter value
);

-- Populate the filters table with filter settings
-- Let's assume initially we are not setting any pre-set values, only the columns to filter on
INSERT INTO datasource_filters (datasource_name, filter_column, filter_value) VALUES
('psgl', 'psglNumber', NULL),
('psgl', 'book', NULL);

CREATE OR REPLACE PROCEDURE fetch_filtered_data(datasource_name VARCHAR)
RETURNS VARCHAR
LANGUAGE JAVASCRIPT
AS
$$
    // Initialize the SQL query
    var sqlQuery = "SELECT * FROM " + DATASOURCE_NAME;
    var hasFilters = false;

    // Fetch filters from the filters table
    var filters = snowflake.createStatement({
        sqlText: "SELECT filter_column, filter_values FROM datasource_filters WHERE datasource_name = ?",
        binds: [DATASOURCE_NAME]
    }).execute();

    // Build WHERE clause based on available filters
    var whereClause = [];
    while (filters.next()) {
        var filterCol = filters.getColumnValue(1);
        var filterVals = filters.getColumnValue(2);
        if (filterVals) {
            var values = filterVals.split(',').map(function(value) {
                return "'" + value.trim() + "'";
            }).join(',');
            whereClause.push(filterCol + " IN (" + values + ")");
        } else {
            whereClause.push(filterCol + " IS NOT NULL");
        }
    }

    // Append WHERE clause if filters are present
    if (whereClause.length > 0) {
        sqlQuery += " WHERE " + whereClause.join(' AND ');
    }

    // Return the constructed SQL query
    return sqlQuery;
$$;

-- Call the procedure with the name of the data source
CALL fetch_filtered_data('psgl');



CREATE OR REPLACE PROCEDURE fetch_filtered_data_sum(datasource_name VARCHAR)
RETURNS FLOAT
LANGUAGE JAVASCRIPT
AS
$$
    // Initialize the SQL query
    var sqlQuery = "SELECT SUM(amt) AS total_amount FROM " + DATASOURCE_NAME;
    var hasFilters = false;

    // Fetch filters from the filters table
    var filters = snowflake.createStatement({
        sqlText: "SELECT filter_column, filter_values FROM datasource_filters WHERE datasource_name = ?",
        binds: [DATASOURCE_NAME]
    }).execute();

    // Build WHERE clause based on available filters
    var whereClause = [];
    while (filters.next()) {
        var filterCol = filters.getColumnValue(1);
        var filterVals = filters.getColumnValue(2);
        if (filterVals) {
            var values = filterVals.split(',').map(function(value) {
                return "'" + value.trim() + "'";
            }).join(',');
            whereClause.push(filterCol + " IN (" + values + ")");
        } else {
            whereClause.push(filterCol + " IS NOT NULL");
        }
    }

    // Append WHERE clause if filters are present
    if (whereClause.length > 0) {
        sqlQuery += " WHERE " + whereClause.join(' AND ');
    }

    // Execute the constructed SQL query
    var result_set = snowflake.createStatement({sqlText: sqlQuery}).execute();

    // Retrieve and return the sum of the amt column
    result_set.next();
    return result_set.getColumnValue(1);
$$;

-- Call the procedure with the name of the data source
CALL fetch_filtered_data_sum('psgl');


CREATE OR REPLACE PROCEDURE fetch_filtered_data_sum(datasource_name VARCHAR, sum_column_name VARCHAR)
RETURNS FLOAT
LANGUAGE JAVASCRIPT
AS
$$
    // Validate sum_column_name to ensure it is safe to use in a query
    var validColumns = ['amt', 'other_numeric_column']; // Add more column names as needed
    if (!validColumns.includes(sum_column_name.toUpperCase())) {
        throw "Invalid column name for summing.";
    }

    // Initialize the SQL query
    var sqlQuery = "SELECT SUM(" + sum_column_name + ") AS total_amount FROM " + DATASOURCE_NAME;

    // Fetch filters from the filters table
    var filters = snowflake.createStatement({
        sqlText: "SELECT filter_column, filter_values FROM datasource_filters WHERE datasource_name = ?",
        binds: [DATASOURCE_NAME]
    }).execute();

    // Build WHERE clause based on available filters
    var whereClause = [];
    while (filters.next()) {
        var filterCol = filters.getColumnValue(1);
        var filterVals = filters.getColumnValue(2);
        if (filterVals) {
            var values = filterVals.split(',').map(function(value) {
                return "'" + value.trim() + "'";
            }).join(',');
            whereClause.push(filterCol + " IN (" + values + ")");
        } else {
            whereClause.push(filterCol + " IS NOT NULL");
        }
    }

    // Append WHERE clause if filters are present
    if (whereClause.length > 0) {
        sqlQuery += " WHERE " + whereClause.join(' AND ');
    }

    // Execute the constructed SQL query
    var result_set = snowflake.createStatement({sqlText: sqlQuery}).execute();

    // Retrieve and return the sum of the specified column
    result_set.next();
    return result_set.getColumnValue(1);
$$;

-- Example call to the procedure with the name of the data source and the column to sum
CALL fetch_filtered_data_sum('psgl', 'amt');


CREATE OR REPLACE PROCEDURE fetch_filtered_data_sum(datasource_name VARCHAR, sum_column_name VARCHAR)
RETURNS FLOAT
LANGUAGE JAVASCRIPT
AS
$$
    // Validate sum_column_name to ensure it is safe to use in a query
    var validColumns = ['AMT', 'OTHER_NUMERIC_COLUMN']; // Add more column names as needed
    if (!validColumns.includes(sum_column_name.toUpperCase())) {
        throw "Invalid column name for summing.";
    }

    // Properly quote identifiers to ensure safe SQL execution
    var quotedDatasourceName = snowflake.execute({
        sqlText: "SELECT IDENTIFIER(?)",
        binds: [DATASOURCE_NAME]
    }).getColumnValue(1);
    var quotedSumColumnName = snowflake.execute({
        sqlText: "SELECT IDENTIFIER(?)",
        binds: [sum_column_name]
    }).getColumnValue(1);

    // Initialize the SQL query
    var sqlQuery = `SELECT SUM(${quotedSumColumnName}) AS total_amount FROM ${quotedDatasourceName}`;

    // Fetch filters from the filters table
    var filters = snowflake.createStatement({
        sqlText: "SELECT filter_column, filter_values FROM datasource_filters WHERE datasource_name = ?",
        binds: [DATASOURCE_NAME]
    }).execute();

    // Build WHERE clause based on available filters
    var whereClause = [];
    while (filters.next()) {
        var filterCol = filters.getColumnValue(1);
        var filterVals = filters.getColumnValue(2);
        if (filterVals) {
            var values = filterVals.split(',').map(function(value) {
                return "'" + value.trim() + "'";
            }).join(',');
            whereClause.push(filterCol + " IN (" + values + ")");
        } else {
            whereClause.push(filterCol + " IS NOT NULL");
        }
    }

    // Append WHERE clause if filters are present
    if (whereClause.length > 0) {
        sqlQuery += " WHERE " + whereClause.join(' AND ');
    }

    // Execute the constructed SQL query
    var result_set = snowflake.createStatement({sqlText: sqlQuery}).execute();

    // Retrieve and return the sum of the specified column
    result_set.next();
    return result_set.getColumnValue(1);
$$;

-- Example call to the procedure with the name of the data source and the column to sum
CALL fetch_filtered_data_sum('psgl', 'amt');
