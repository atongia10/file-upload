package com.example.reporting.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

@Entity
@Table(name = "tbl_category")
@Getter
@Setter
public class Category {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long categoryId;

    private String categoryName;
    private int sequence;
    private String customName;
}

@Entity
@Table(name = "tbl_difference")
@Getter
@Setter
public class Difference {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long differenceId;

    private String differenceName;
    private String category;
    private String timing;
}

@Entity
@Table(name = "tbl_otp_difference_mapping")
@Getter
@Setter
public class OtpDifferenceMapping {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long mappingId;

    private String otpCode;

    @ManyToOne
    @JoinColumn(name = "differenceId")
    private Difference difference;
}

@Entity
@Table(name = "tbl_balances")
@Getter
@Setter
public class Balance {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long balanceId;

    @ManyToOne
    @JoinColumn(name = "mappingId")
    private OtpDifferenceMapping otpDifferenceMapping;

    private Long jurisdictionObligationId;
    private Long differenceId;
    private double amount;
    private Long periodId;
}

@Entity
@Table(name = "jurisdiction_obligation_difference_register")
@Getter
@Setter
public class JurisdictionObligationDifferenceRegister {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long jodId;

    private Long jurisdictionObligationId;

    @ManyToOne
    @JoinColumn(name = "differenceId")
    private Difference difference;
}


package com.example.reporting.repository;

import com.example.reporting.entity.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface CategoryRepository extends JpaRepository<Category, Long> {
}

@Repository
public interface DifferenceRepository extends JpaRepository<Difference, Long> {
    List<Difference> findByCategory(String category);
}

@Repository
public interface OtpDifferenceMappingRepository extends JpaRepository<OtpDifferenceMapping, Long> {
    List<OtpDifferenceMapping> findByDifference(Difference difference);
}

@Repository
public interface BalanceRepository extends JpaRepository<Balance, Long> {
    List<Balance> findByJurisdictionObligationIdAndPeriodId(Long jurisdictionObligationId, Long periodId);
}

@Repository
public interface JurisdictionObligationDifferenceRegisterRepository extends JpaRepository<JurisdictionObligationDifferenceRegister, Long> {
    List<JurisdictionObligationDifferenceRegister> findByJurisdictionObligationIdAndDifference(Long jurisdictionObligationId, Difference difference);
}


package com.example.reporting.service;

import com.example.reporting.entity.*;
import com.example.reporting.repository.*;
import com.example.reporting.dto.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class ReportingService {

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private DifferenceRepository differenceRepository;

    @Autowired
    private OtpDifferenceMappingRepository otpDifferenceMappingRepository;

    @Autowired
    private BalanceRepository balanceRepository;

    @Autowired
    private JurisdictionObligationDifferenceRegisterRepository jurisdictionObligationDifferenceRegisterRepository;

    public List<CategoryResponse> getReport(Long jurisdictionId, Long obligationId, Long periodId) {
        List<Category> categories = categoryRepository.findAll();
        List<CategoryResponse> response = new ArrayList<>();
        double ptbi = 50;  // Example PTBI value, replace with actual as needed

        for (Category category : categories) {
            CategoryResponse categoryResponse = new CategoryResponse(category.getCustomName(), category.getSequence());
            double categoryTotal = 0;

            List<Difference> differences = differenceRepository.findByCategory(category.getCategoryName());
            Map<String, TimingResponse> timingMap = new HashMap<>();

            for (Difference difference : differences) {
                List<Balance> balances = balanceRepository
                        .findByJurisdictionObligationIdAndPeriodId(jurisdictionId, periodId);

                for (Balance balance : balances) {
                    if (balance.getDifferenceId().equals(difference.getDifferenceId())) {
                        TimingResponse timingResponse = timingMap.computeIfAbsent(difference.getTiming(),
                                k -> new TimingResponse(difference.getTiming()));

                        List<OtpDifferenceMapping> otpMappings = otpDifferenceMappingRepository.findByDifference(difference);
                        for (OtpDifferenceMapping otpMapping : otpMappings) {
                            OtpCodeResponse otpCodeResponse = timingResponse.getOtpCodes()
                                    .computeIfAbsent(otpMapping.getOtpCode(), k -> new OtpCodeResponse(otpMapping.getOtpCode()));

                            otpCodeResponse.addDifference(new DifferenceResponse(difference.getDifferenceName(), balance.getAmount()));
                            categoryTotal += balance.getAmount();
                        }
                    }
                }
            }

            if (category.getSequence() == 1) {
                categoryTotal += ptbi;  // Add PTBI only to the first category
            } else if (!response.isEmpty()) {
                CategoryResponse previousCategory = response.get(response.size() - 1);
                categoryTotal += previousCategory.getTotal();  // Add the total of the previous category
            }

            categoryResponse.setTotal(categoryTotal);
            timingMap.values().forEach(categoryResponse::addTiming);

            response.add(categoryResponse);
        }

        return response;
    }
}


package com.example.reporting.controller;

import com.example.reporting.dto.*;
import com.example.reporting.service.ReportingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/report")
public class ReportingController {

    @Autowired
    private ReportingService reportingService;

    @GetMapping
    public List<CategoryResponse> getReport(
            @RequestParam Long jurisdictionId,
            @RequestParam Long obligationId,
            @RequestParam Long periodId) {
        return reportingService.getReport(jurisdictionId, obligationId, periodId);
    }
}


package com.example.reporting.dto;

import lombok.Getter;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

@Getter
@Setter
public class CategoryResponse {
    private String name;
    private int sequence;
    private double total;
    private List<TimingResponse> timings = new ArrayList<>();

    public CategoryResponse(String name, int sequence) {
        this.name = name;
        this.sequence = sequence;
    }

    public void addTiming(TimingResponse timing) {
        this.timings.add(timing);
    }
}

@Getter
@Setter
public class TimingResponse {
    private String timing;
    private Map<String, OtpCodeResponse> otpCodes = new HashMap<>();

    public TimingResponse(String timing) {
        this.timing = timing;
    }
}

@Getter
@Setter
public class OtpCodeResponse {
    private String otpCode;
    private List<DifferenceResponse> differences = new ArrayList<>();

    public OtpCodeResponse(String otpCode) {
        this.otpCode = otpCode;
    }

    public void addDifference(DifferenceResponse difference) {
        this.differences.add(difference);
    }
}

@Getter
@Setter
public class DifferenceResponse {
    private String differenceName;
    private double amount;

    public DifferenceResponse(String differenceName, double amount) {
        this.differenceName = differenceName;
        this.amount = amount;
    }
}


spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true


curl "http://localhost:8080/api/report?jurisdictionId=1&obligationId=1&periodId=1"

==
DROP TABLE IF EXISTS tbl_category;
DROP TABLE IF EXISTS tbl_difference;
DROP TABLE IF EXISTS tbl_otp_difference_mapping;
DROP TABLE IF EXISTS tbl_balances;
DROP TABLE IF EXISTS jurisdiction_obligation_difference_register;

CREATE TABLE tbl_category (
    category_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    category_name VARCHAR(255),
    sequence INT,
    custom_name VARCHAR(255)
);

CREATE TABLE tbl_difference (
    difference_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    difference_name VARCHAR(255),
    category VARCHAR(255),
    timing VARCHAR(255)
);

CREATE TABLE tbl_otp_difference_mapping (
    mapping_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    otp_code VARCHAR(255),
    difference_id BIGINT,
    FOREIGN KEY (difference_id) REFERENCES tbl_difference(difference_id)
);

CREATE TABLE tbl_balances (
    balance_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    mapping_id BIGINT,
    jurisdiction_obligation_id BIGINT,
    difference_id BIGINT,
    amount DOUBLE,
    period_id BIGINT,
    FOREIGN KEY (mapping_id) REFERENCES tbl_otp_difference_mapping(mapping_id),
    FOREIGN KEY (difference_id) REFERENCES tbl_difference(difference_id)
);

CREATE TABLE jurisdiction_obligation_difference_register (
    jod_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    jurisdiction_obligation_id BIGINT,
    difference_id BIGINT,
    FOREIGN KEY (difference_id) REFERENCES tbl_difference(difference_id)
);

	INSERT INTO tbl_category (category_name, sequence, custom_name) VALUES
    ('Category1', 1, 'Custom Category Name 1'),
    ('Category2', 2, 'Custom Category Name 2');

    INSERT INTO tbl_difference (difference_name, category, timing) VALUES
    ('Penalties', 'Category1', 'Timing1'),
    ('GAAP to STAT', 'Category1', 'Timing1'),
    ('Permanent', 'Category2', 'Timing2');

    INSERT INTO tbl_otp_difference_mapping (otp_code, difference_id) VALUES
    ('OTP1', 1),
    ('OTP1', 2),
    ('OTP2', 3);

    INSERT INTO tbl_balances (mapping_id, jurisdiction_obligation_id, difference_id, amount, period_id) VALUES
    (1, 1, 1, 100, 1),
    (2, 1, 2, 150, 1),
    (3, 2, 3, 200, 1);

    INSERT INTO jurisdiction_obligation_difference_register (jurisdiction_obligation_id, difference_id) VALUES
    (1, 1),
    (1, 2),
    (2, 3);


spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=none
spring.datasource.schema=classpath:schema.sql
spring.datasource.data=classpath:data.sql

