CREATE TABLE HIERARCHY (
    HierarchyID INT PRIMARY KEY AUTO_INCREMENT,
    LevelName VARCHAR(255) NOT NULL,
    ParentID INT,
    SequenceNumber INT NOT NULL,
    UNIQUE (LevelName, ParentID),
    FOREIGN KEY (ParentID) REFERENCES HIERARCHY(HierarchyID)
);

CREATE TABLE TBL_DIFFERENCE (
    DifferenceID INT PRIMARY KEY AUTO_INCREMENT,
    DifferenceName VARCHAR(255) NOT NULL,
    Category VARCHAR(255) NOT NULL,
    Timing VARCHAR(255) NOT NULL,
    UNIQUE (DifferenceName, Category, Timing)
);

CREATE TABLE OTP_CODE_DIFFERENCE_MAPPING (
    MappingID INT PRIMARY KEY AUTO_INCREMENT,
    OTPCode VARCHAR(255) NOT NULL,
    DifferenceID INT NOT NULL,
    FOREIGN KEY (DifferenceID) REFERENCES TBL_DIFFERENCE(DifferenceID)
);

CREATE TABLE TBL_BALANCE (
    BalanceID INT PRIMARY KEY AUTO_INCREMENT,
    DifferenceID INT NOT NULL,
    Amount DECIMAL(18, 2) NOT NULL,
    FOREIGN KEY (DifferenceID) REFERENCES TBL_DIFFERENCE(DifferenceID)
);


INSERT INTO HIERARCHY (LevelName, ParentID, SequenceNumber) VALUES ('Category', NULL, 1);
INSERT INTO HIERARCHY (LevelName, ParentID, SequenceNumber) VALUES ('Timing', 1, 2);
INSERT INTO HIERARCHY (LevelName, ParentID, SequenceNumber) VALUES ('OTPCode', 2, 3);
INSERT INTO HIERARCHY (LevelName, ParentID, SequenceNumber) VALUES ('Difference', 3, 4);

INSERT INTO TBL_DIFFERENCE (DifferenceName, Category, Timing) VALUES ('Diff1', 'Category1', 'Timing1');
INSERT INTO TBL_DIFFERENCE (DifferenceName, Category, Timing) VALUES ('Diff2', 'Category1', 'Timing1');
INSERT INTO TBL_DIFFERENCE (DifferenceName, Category, Timing) VALUES ('Diff3', 'Category1', 'Timing2');
INSERT INTO TBL_DIFFERENCE (DifferenceName, Category, Timing) VALUES ('Diff4', 'Category2', 'Timing2');

INSERT INTO OTP_CODE_DIFFERENCE_MAPPING (OTPCode, DifferenceID) VALUES ('OTPCode1', 1);
INSERT INTO OTP_CODE_DIFFERENCE_MAPPING (OTPCode, DifferenceID) VALUES ('OTPCode1', 2);
INSERT INTO OTP_CODE_DIFFERENCE_MAPPING (OTPCode, DifferenceID) VALUES ('OTPCode2', 3);
INSERT INTO OTP_CODE_DIFFERENCE_MAPPING (OTPCode, DifferenceID) VALUES ('OTPCode2', 4);

INSERT INTO TBL_BALANCE (DifferenceID, Amount) VALUES (1, 100.0);
INSERT INTO TBL_BALANCE (DifferenceID, Amount) VALUES (2, 150.0);
INSERT INTO TBL_BALANCE (DifferenceID, Amount) VALUES (3, 200.0);
INSERT INTO TBL_BALANCE (DifferenceID, Amount) VALUES (4, 250.0);


package com.example.hierarchy;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class HierarchyApplication {

    public static void main(String[] args) {
        SpringApplication.run(HierarchyApplication.class, args);
    }
}


package com.example.hierarchy.entity;

import javax.persistence.*;

@Entity
@Table(name = "TBL_DIFFERENCE", uniqueConstraints = @UniqueConstraint(columnNames = {"DifferenceName", "Category", "Timing"}))
public class Difference {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long differenceId;

    @Column(name = "DifferenceName", nullable = false)
    private String differenceName;

    @Column(name = "Category", nullable = false)
    private String category;

    @Column(name = "Timing", nullable = false)
    private String timing;

    // Getters and Setters
}


package com.example.hierarchy.entity;

import javax.persistence.*;

@Entity
@Table(name = "TBL_BALANCE")
public class Balance {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long balanceId;

    @ManyToOne
    @JoinColumn(name = "DifferenceID", nullable = false)
    private Difference difference;

    @Column(name = "Amount", nullable = false)
    private Double amount;

    // Getters and Setters
}


package com.example.hierarchy.entity;

import javax.persistence.*;

@Entity
@Table(name = "OTP_CODE_DIFFERENCE_MAPPING")
public class OtpCodeDifferenceMapping {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long mappingId;

    @Column(name = "OTPCode", nullable = false)
    private String otpCode;

    @ManyToOne
    @JoinColumn(name = "DifferenceID", nullable = false)
    private Difference difference;

    // Getters and Setters
}


package com.example.hierarchy.entity;

import javax.persistence.*;

@Entity
@Table(name = "HIERARCHY", uniqueConstraints = @UniqueConstraint(columnNames = {"LevelName", "ParentID"}))
public class Hierarchy {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long hierarchyId;

    @Column(name = "LevelName", nullable = false)
    private String levelName;

    @ManyToOne
    @JoinColumn(name = "ParentID")
    private Hierarchy parent;

    @Column(name = "SequenceNumber", nullable = false)
    private int sequenceNumber;

    // Getters and Setters
}


package com.example.hierarchy.dto;

import java.util.HashMap;
import java.util.Map;

public class CategoryDTO {
    private String categoryName;
    private double cumulativeValue;
    private Map<String, TimingDTO> timings = new HashMap<>();

    public CategoryDTO(String categoryName) {
        this.categoryName = categoryName;
    }

    // Getters and Setters
}


package com.example.hierarchy.dto;

import java.util.HashMap;
import java.util.Map;

public class TimingDTO {
    private String timingName;
    private double value;
    private Map<String, OTPCodeDTO> otpCodes = new HashMap<>();

    public TimingDTO(String timingName) {
        this.timingName = timingName;
    }

    // Getters and Setters
}


package com.example.hierarchy.dto;

import java.util.ArrayList;
import java.util.List;

public class OTPCodeDTO {
    private String otpCodeName;
    private double value;
    private List<DifferenceDTO> differences = new ArrayList<>();

    public OTPCodeDTO(String otpCodeName) {
        this.otpCodeName = otpCodeName;
    }

    // Getters and Setters
}


package com.example.hierarchy.dto;

public class DifferenceDTO {
    private String differenceName;
    private double value;

    public DifferenceDTO(String differenceName, double value) {
        this.differenceName = differenceName;
        this.value = value;
    }

    // Getters and Setters
}


package com.example.hierarchy.repository;

import com.example.hierarchy.entity.Difference;
import org.springframework.data.jpa.repository.JpaRepository;

public interface DifferenceRepository extends JpaRepository<Difference, Long> {
}


package com.example.hierarchy.repository;

import com.example.hierarchy.entity.Balance;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BalanceRepository extends JpaRepository<Balance, Long> {
    Balance findByDifferenceId(Long differenceId);
}


package com.example.hierarchy.repository;

import com.example.hierarchy.entity.OtpCodeDifferenceMapping;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface OtpCodeDifferenceMappingRepository extends JpaRepository<OtpCodeDifferenceMapping, Long> {
    List<OtpCodeDifferenceMapping> findByDifferenceId(Long differenceId);
}


package com.example.hierarchy.repository;

import com.example.hierarchy.entity.Hierarchy;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface HierarchyRepository extends JpaRepository<Hierarchy, Long> {
    List<Hierarchy> findByParentIsNullOrderBySequenceNumberAsc();
}


package com.example.hierarchy.service;

import com.example.hierarchy.dto.*;
import com.example.hierarchy.entity.*;
import com.example.hierarchy.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class HierarchyService {

    @Autowired
    private DifferenceRepository differenceRepository;

    @Autowired
    private BalanceRepository balanceRepository;

    @Autowired
    private OtpCodeDifferenceMappingRepository otpCodeDifferenceMappingRepository;

    private final double PTBI = 100.0;

    public List<CategoryDTO> buildHierarchyTree() {
        List<Difference> differences = differenceRepository.findAll();
        Map<String, CategoryDTO> categoryMap = new LinkedHashMap<>();
        double previousCumulativeValue = 0.0;

        for (Difference difference : differences) {
            CategoryDTO category = categoryMap.computeIfAbsent(difference.getCategory(), k -> new CategoryDTO(k));
            TimingDTO timing = category.getTimings().computeIfAbsent(difference.getTiming(), k -> new TimingDTO(k));

            List<OtpCodeDifferenceMapping> mappings = otpCodeDifferenceMappingRepository.findByDifferenceId(difference.getDifferenceId());
            for (OtpCodeDifferenceMapping mapping : mappings) {
                OTPCodeDTO otpCode = timing.getOtpCodes().computeIfAbsent(mapping.getOtpCode(), k -> new OTPCodeDTO(k));
                Balance balance = balanceRepository.findByDifferenceId(difference.getDifferenceId());
                DifferenceDTO differenceDTO = new DifferenceDTO(difference.getDifferenceName(), balance.getAmount());
                otpCode.getDifferences().add(differenceDTO);
                otpCode.setValue(otpCode.getValue() + balance.getAmount());
            }

            timing.setValue(timing.getValue() + otpCode.getValue());
        }

        // Calculate cumulative values for each category
        for (CategoryDTO category : categoryMap.values()) {
            double categoryTotal = category.getTimings().values().stream().mapToDouble(TimingDTO::getValue).sum();
            double cumulativeValue = categoryTotal + previousCumulativeValue + (previousCumulativeValue == 0.0 ? PTBI : 0.0);
            category.setCumulativeValue(cumulativeValue);
            previousCumulativeValue = cumulativeValue;
        }

        return new ArrayList<>(categoryMap.values());
    }
}


package com.example.hierarchy.controller;

import com.example.hierarchy.dto.CategoryDTO;
import com.example.hierarchy.service.HierarchyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/hierarchy")
public class HierarchyController {

    @Autowired
    private HierarchyService hierarchyService;

    @GetMapping("/tree")
    public List<CategoryDTO> getHierarchyTree() {
        return hierarchyService.buildHierarchyTree();
    }
}



